// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             (unknown)
// source: cells-test.proto

package test

import (
	context "context"
	fmt "fmt"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	sync "sync"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

var (
	enhancedTesterServers     = make(map[string]TesterEnhancedServer)
	enhancedTesterServersLock = sync.RWMutex{}
)

type idTesterServer interface {
	ID() string
}
type NamedTesterServer interface {
	TesterServer
	Name() string
}
type WrappedNamedTesterServer struct {
	NamedTesterServer
	wrap []func(context.Context) (context.Context, bool)
}
type TesterEnhancedServer map[string]WrappedNamedTesterServer

func (m WrappedNamedTesterServer) AddMethodHandlingWrap(f func(context.Context) (context.Context, bool)) {
	m.wrap = append(m.wrap, f)
}

func (m TesterEnhancedServer) Run(ctx context.Context, r *RunTestsRequest) (*RunTestsResponse, error) {
	enhancedTesterServersLock.RLock()
	defer enhancedTesterServersLock.RUnlock()
	for _, mm := range m {
		var cont bool
		for _, w := range mm.wrap {
			var ok bool
			if ctx, ok = w(ctx); !ok {
				cont = true
				break
			}
		}
		if cont {
			continue
		}
		return mm.Run(ctx, r)
	}
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (m TesterEnhancedServer) mustEmbedUnimplementedTesterServer() {}
func RegisterTesterEnhancedServer(s grpc.ServiceRegistrar, srv NamedTesterServer) {
	enhancedTesterServersLock.Lock()
	defer enhancedTesterServersLock.Unlock()
	idServer, ok := s.(idTesterServer)
	if !ok {
		fmt.Errorf("could not register service %s", srv.Name())
		return
	}
	id := idServer.ID()
	m, ok := enhancedTesterServers[id]
	if !ok {
		m = TesterEnhancedServer{}
		enhancedTesterServers[id] = m
		RegisterTesterServer(s, m)
	}
	m[srv.Name()] = WrappedNamedTesterServer{NamedTesterServer: srv}
}
func DeregisterTesterEnhancedServer(s grpc.ServiceRegistrar, name string) {
	enhancedTesterServersLock.Lock()
	defer enhancedTesterServersLock.Unlock()
	idServer, ok := s.(idTesterServer)
	if !ok {
		fmt.Errorf("could not deregister service")
		return
	}
	id := idServer.ID()
	m, ok := enhancedTesterServers[id]
	if !ok {
		return
	}
	delete(m, name)
}
