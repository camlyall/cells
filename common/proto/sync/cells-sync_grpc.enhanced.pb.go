// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             (unknown)
// source: cells-sync.proto

package sync

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	sync "sync"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

var (
	enhancedSyncEndpointServers     = make(map[string]SyncEndpointEnhancedServer)
	enhancedSyncEndpointServersLock = sync.RWMutex{}
)

type idSyncEndpointServer interface {
	ID() string
}
type SyncEndpointEnhancedServer interface {
	SyncEndpointServer
	AddFilter(func(context.Context, interface{}) bool)
	addHandler(SyncEndpointServer)
	filter(context.Context) []SyncEndpointServer
}
type SyncEndpointEnhancedServerImpl struct {
	filters  []func(context.Context, interface{}) bool
	handlers []SyncEndpointServer
}

func (m *SyncEndpointEnhancedServerImpl) AddFilter(f func(context.Context, interface{}) bool) {
	m.filters = append(m.filters, f)
}
func (m *SyncEndpointEnhancedServerImpl) addHandler(srv SyncEndpointServer) {
	m.handlers = append(m.handlers, srv)
}
func (m *SyncEndpointEnhancedServerImpl) filter(ctx context.Context) []SyncEndpointServer {
	var ret []SyncEndpointServer
	for _, i := range m.handlers {
		valid := true
		for _, filter := range m.filters {
			if !filter(ctx, i) {
				valid = false
				break
			}
			if valid {
				ret = append(ret, i)
			}
		}
	}
	return ret
}

func (m *SyncEndpointEnhancedServerImpl) TriggerResync(ctx context.Context, r *ResyncRequest) (*ResyncResponse, error) {
	for _, handler := range m.filter(ctx) {
		return handler.TriggerResync(ctx, r)
	}
	return nil, status.Errorf(codes.Unimplemented, "method TriggerResync not implemented")
}
func (m *SyncEndpointEnhancedServerImpl) mustEmbedUnimplementedSyncEndpointServer() {}
func RegisterSyncEndpointEnhancedServer(s grpc.ServiceRegistrar, srv SyncEndpointServer) {
	idServer, ok := s.(idSyncEndpointServer)
	if ok {
		enhancedSyncEndpointServersLock.Lock()
		defer enhancedSyncEndpointServersLock.Unlock()
		instance, ok := enhancedSyncEndpointServers[idServer.ID()]
		if !ok {
			instance = &SyncEndpointEnhancedServerImpl{}
			enhancedSyncEndpointServers[idServer.ID()] = instance
		}
		instance.addHandler(srv)
		RegisterSyncEndpointServer(s, instance)
	} else {
		RegisterSyncEndpointServer(s, srv)
	}
}
