// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             (unknown)
// source: cells-registry.proto

package registry

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	sync "sync"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

var (
	enhancedRegistryServers     = make(map[string]RegistryEnhancedServer)
	enhancedRegistryServersLock = sync.RWMutex{}
)

type idRegistryServer interface {
	ID() string
}
type RegistryEnhancedServer interface {
	RegistryServer
	AddFilter(func(context.Context, interface{}) bool)
	addHandler(RegistryServer)
	filter(context.Context) []RegistryServer
}
type RegistryEnhancedServerImpl struct {
	filters  []func(context.Context, interface{}) bool
	handlers []RegistryServer
}

func (m *RegistryEnhancedServerImpl) AddFilter(f func(context.Context, interface{}) bool) {
	m.filters = append(m.filters, f)
}
func (m *RegistryEnhancedServerImpl) addHandler(srv RegistryServer) {
	m.handlers = append(m.handlers, srv)
}
func (m *RegistryEnhancedServerImpl) filter(ctx context.Context) []RegistryServer {
	var ret []RegistryServer
	for _, i := range m.handlers {
		valid := true
		for _, filter := range m.filters {
			if !filter(ctx, i) {
				valid = false
				break
			}
			if valid {
				ret = append(ret, i)
			}
		}
	}
	return ret
}

func (m *RegistryEnhancedServerImpl) Session(s Registry_SessionServer) error {
	for _, handler := range m.filter(s.Context()) {
		return handler.Session(s)
	}
	return status.Errorf(codes.Unimplemented, "method Session not implemented")
}

func (m *RegistryEnhancedServerImpl) Start(ctx context.Context, r *Item) (*EmptyResponse, error) {
	for _, handler := range m.filter(ctx) {
		return handler.Start(ctx, r)
	}
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}

func (m *RegistryEnhancedServerImpl) Stop(ctx context.Context, r *Item) (*EmptyResponse, error) {
	for _, handler := range m.filter(ctx) {
		return handler.Stop(ctx, r)
	}
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}

func (m *RegistryEnhancedServerImpl) Get(ctx context.Context, r *GetRequest) (*GetResponse, error) {
	for _, handler := range m.filter(ctx) {
		return handler.Get(ctx, r)
	}
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

func (m *RegistryEnhancedServerImpl) Register(ctx context.Context, r *Item) (*EmptyResponse, error) {
	for _, handler := range m.filter(ctx) {
		return handler.Register(ctx, r)
	}
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}

func (m *RegistryEnhancedServerImpl) Deregister(ctx context.Context, r *Item) (*EmptyResponse, error) {
	for _, handler := range m.filter(ctx) {
		return handler.Deregister(ctx, r)
	}
	return nil, status.Errorf(codes.Unimplemented, "method Deregister not implemented")
}

func (m *RegistryEnhancedServerImpl) List(ctx context.Context, r *ListRequest) (*ListResponse, error) {
	for _, handler := range m.filter(ctx) {
		return handler.List(ctx, r)
	}
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

func (m *RegistryEnhancedServerImpl) Watch(r *WatchRequest, s Registry_WatchServer) error {
	for _, handler := range m.filter(s.Context()) {
		return handler.Watch(r, s)
	}
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}

func (m *RegistryEnhancedServerImpl) NewLocker(s Registry_NewLockerServer) error {
	for _, handler := range m.filter(s.Context()) {
		return handler.NewLocker(s)
	}
	return status.Errorf(codes.Unimplemented, "method NewLocker not implemented")
}
func (m *RegistryEnhancedServerImpl) mustEmbedUnimplementedRegistryServer() {}
func RegisterRegistryEnhancedServer(s grpc.ServiceRegistrar, srv RegistryServer) {
	idServer, ok := s.(idRegistryServer)
	if ok {
		enhancedRegistryServersLock.Lock()
		defer enhancedRegistryServersLock.Unlock()
		instance, ok := enhancedRegistryServers[idServer.ID()]
		if !ok {
			instance = &RegistryEnhancedServerImpl{}
			enhancedRegistryServers[idServer.ID()] = instance
		}
		instance.addHandler(srv)
		RegisterRegistryServer(s, instance)
	} else {
		RegisterRegistryServer(s, srv)
	}
}
