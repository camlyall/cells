// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             (unknown)
// source: cells-log.proto

package log

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	sync "sync"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

var (
	enhancedLogRecorderServers     = make(map[string]LogRecorderEnhancedServer)
	enhancedLogRecorderServersLock = sync.RWMutex{}
)

type idLogRecorderServer interface {
	ID() string
}
type LogRecorderEnhancedServer interface {
	LogRecorderServer
	AddFilter(func(context.Context, interface{}) bool)
	addHandler(LogRecorderServer)
	filter(context.Context) []LogRecorderServer
}
type LogRecorderEnhancedServerImpl struct {
	filters  []func(context.Context, interface{}) bool
	handlers []LogRecorderServer
}

func (m *LogRecorderEnhancedServerImpl) AddFilter(f func(context.Context, interface{}) bool) {
	m.filters = append(m.filters, f)
}
func (m *LogRecorderEnhancedServerImpl) addHandler(srv LogRecorderServer) {
	m.handlers = append(m.handlers, srv)
}
func (m *LogRecorderEnhancedServerImpl) filter(ctx context.Context) []LogRecorderServer {
	var ret []LogRecorderServer
	for _, i := range m.handlers {
		valid := true
		for _, filter := range m.filters {
			if !filter(ctx, i) {
				valid = false
				break
			}
			if valid {
				ret = append(ret, i)
			}
		}
	}
	return ret
}

// PutLog adds received log messages to the corresponding log repository.

func (m *LogRecorderEnhancedServerImpl) PutLog(s LogRecorder_PutLogServer) error {
	for _, handler := range m.filter(s.Context()) {
		return handler.PutLog(s)
	}
	return status.Errorf(codes.Unimplemented, "method PutLog not implemented")
}

// ListLogs performs a paginated search query in the log repository.

func (m *LogRecorderEnhancedServerImpl) ListLogs(r *ListLogRequest, s LogRecorder_ListLogsServer) error {
	for _, handler := range m.filter(s.Context()) {
		return handler.ListLogs(r, s)
	}
	return status.Errorf(codes.Unimplemented, "method ListLogs not implemented")
}

// DeleteLogs deletes logs based on a request (cannot be empty)

func (m *LogRecorderEnhancedServerImpl) DeleteLogs(ctx context.Context, r *ListLogRequest) (*DeleteLogsResponse, error) {
	for _, handler := range m.filter(ctx) {
		return handler.DeleteLogs(ctx, r)
	}
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLogs not implemented")
}

// AggregatedLogs performs a query to retrieve log events of the given type, faceted by time range.

func (m *LogRecorderEnhancedServerImpl) AggregatedLogs(r *TimeRangeRequest, s LogRecorder_AggregatedLogsServer) error {
	for _, handler := range m.filter(s.Context()) {
		return handler.AggregatedLogs(r, s)
	}
	return status.Errorf(codes.Unimplemented, "method AggregatedLogs not implemented")
}
func (m *LogRecorderEnhancedServerImpl) mustEmbedUnimplementedLogRecorderServer() {}
func RegisterLogRecorderEnhancedServer(s grpc.ServiceRegistrar, srv LogRecorderServer) {
	idServer, ok := s.(idLogRecorderServer)
	if ok {
		enhancedLogRecorderServersLock.Lock()
		defer enhancedLogRecorderServersLock.Unlock()
		instance, ok := enhancedLogRecorderServers[idServer.ID()]
		if !ok {
			instance = &LogRecorderEnhancedServerImpl{}
			enhancedLogRecorderServers[idServer.ID()] = instance
		}
		instance.addHandler(srv)
		RegisterLogRecorderServer(s, instance)
	} else {
		RegisterLogRecorderServer(s, srv)
	}
}
