// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             (unknown)
// source: cells-message.proto

package broker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	sync "sync"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

var (
	enhancedBrokerServers     = make(map[string]BrokerEnhancedServer)
	enhancedBrokerServersLock = sync.RWMutex{}
)

type idBrokerServer interface {
	ID() string
}
type BrokerEnhancedServer interface {
	BrokerServer
	AddFilter(func(context.Context, interface{}) bool)
	addHandler(BrokerServer)
	filter(context.Context) []BrokerServer
}
type BrokerEnhancedServerImpl struct {
	filters  []func(context.Context, interface{}) bool
	handlers []BrokerServer
}

func (m *BrokerEnhancedServerImpl) AddFilter(f func(context.Context, interface{}) bool) {
	m.filters = append(m.filters, f)
}
func (m *BrokerEnhancedServerImpl) addHandler(srv BrokerServer) {
	m.handlers = append(m.handlers, srv)
}
func (m *BrokerEnhancedServerImpl) filter(ctx context.Context) []BrokerServer {
	var ret []BrokerServer
	for _, i := range m.handlers {
		valid := true
		for _, filter := range m.filters {
			if !filter(ctx, i) {
				valid = false
				break
			}
			if valid {
				ret = append(ret, i)
			}
		}
	}
	return ret
}

func (m *BrokerEnhancedServerImpl) Publish(s Broker_PublishServer) error {
	for _, handler := range m.filter(s.Context()) {
		return handler.Publish(s)
	}
	return status.Errorf(codes.Unimplemented, "method Publish not implemented")
}

func (m *BrokerEnhancedServerImpl) Subscribe(s Broker_SubscribeServer) error {
	for _, handler := range m.filter(s.Context()) {
		return handler.Subscribe(s)
	}
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (m *BrokerEnhancedServerImpl) mustEmbedUnimplementedBrokerServer() {}
func RegisterBrokerEnhancedServer(s grpc.ServiceRegistrar, srv BrokerServer) {
	idServer, ok := s.(idBrokerServer)
	if ok {
		enhancedBrokerServersLock.Lock()
		defer enhancedBrokerServersLock.Unlock()
		instance, ok := enhancedBrokerServers[idServer.ID()]
		if !ok {
			instance = &BrokerEnhancedServerImpl{}
			enhancedBrokerServers[idServer.ID()] = instance
		}
		instance.addHandler(srv)
		RegisterBrokerServer(s, instance)
	} else {
		RegisterBrokerServer(s, srv)
	}
}
