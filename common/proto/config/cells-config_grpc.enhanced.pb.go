// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             (unknown)
// source: cells-config.proto

package config

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	sync "sync"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

var (
	enhancedConfigServers     = make(map[string]ConfigEnhancedServer)
	enhancedConfigServersLock = sync.RWMutex{}
)

type idConfigServer interface {
	ID() string
}
type ConfigEnhancedServer interface {
	ConfigServer
	AddFilter(func(context.Context, interface{}) bool)
	addHandler(ConfigServer)
	filter(context.Context) []ConfigServer
}
type ConfigEnhancedServerImpl struct {
	filters  []func(context.Context, interface{}) bool
	handlers []ConfigServer
}

func (m *ConfigEnhancedServerImpl) AddFilter(f func(context.Context, interface{}) bool) {
	m.filters = append(m.filters, f)
}
func (m *ConfigEnhancedServerImpl) addHandler(srv ConfigServer) {
	m.handlers = append(m.handlers, srv)
}
func (m *ConfigEnhancedServerImpl) filter(ctx context.Context) []ConfigServer {
	var ret []ConfigServer
	for _, i := range m.handlers {
		valid := true
		for _, filter := range m.filters {
			if !filter(ctx, i) {
				valid = false
				break
			}
			if valid {
				ret = append(ret, i)
			}
		}
	}
	return ret
}

func (m *ConfigEnhancedServerImpl) Get(ctx context.Context, r *GetRequest) (*GetResponse, error) {
	for _, handler := range m.filter(ctx) {
		return handler.Get(ctx, r)
	}
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

func (m *ConfigEnhancedServerImpl) Set(ctx context.Context, r *SetRequest) (*SetResponse, error) {
	for _, handler := range m.filter(ctx) {
		return handler.Set(ctx, r)
	}
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}

func (m *ConfigEnhancedServerImpl) Delete(ctx context.Context, r *DeleteRequest) (*DeleteResponse, error) {
	for _, handler := range m.filter(ctx) {
		return handler.Delete(ctx, r)
	}
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func (m *ConfigEnhancedServerImpl) Watch(r *WatchRequest, s Config_WatchServer) error {
	for _, handler := range m.filter(s.Context()) {
		return handler.Watch(r, s)
	}
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}

func (m *ConfigEnhancedServerImpl) Save(ctx context.Context, r *SaveRequest) (*SaveResponse, error) {
	for _, handler := range m.filter(ctx) {
		return handler.Save(ctx, r)
	}
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}

func (m *ConfigEnhancedServerImpl) NewLocker(s Config_NewLockerServer) error {
	for _, handler := range m.filter(s.Context()) {
		return handler.NewLocker(s)
	}
	return status.Errorf(codes.Unimplemented, "method NewLocker not implemented")
}
func (m *ConfigEnhancedServerImpl) mustEmbedUnimplementedConfigServer() {}
func RegisterConfigEnhancedServer(s grpc.ServiceRegistrar, srv ConfigServer) {
	idServer, ok := s.(idConfigServer)
	if ok {
		enhancedConfigServersLock.Lock()
		defer enhancedConfigServersLock.Unlock()
		instance, ok := enhancedConfigServers[idServer.ID()]
		if !ok {
			instance = &ConfigEnhancedServerImpl{}
			enhancedConfigServers[idServer.ID()] = instance
		}
		instance.addHandler(srv)
		RegisterConfigServer(s, instance)
	} else {
		RegisterConfigServer(s, srv)
	}
}
