// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             (unknown)
// source: cells-chat.proto

package chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	sync "sync"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

var (
	enhancedChatServiceServers     = make(map[string]ChatServiceEnhancedServer)
	enhancedChatServiceServersLock = sync.RWMutex{}
)

type idChatServiceServer interface {
	ID() string
}
type ChatServiceEnhancedServer interface {
	ChatServiceServer
	AddFilter(func(context.Context, interface{}) bool)
	addHandler(ChatServiceServer)
	filter(context.Context) []ChatServiceServer
}
type ChatServiceEnhancedServerImpl struct {
	filters  []func(context.Context, interface{}) bool
	handlers []ChatServiceServer
}

func (m *ChatServiceEnhancedServerImpl) AddFilter(f func(context.Context, interface{}) bool) {
	m.filters = append(m.filters, f)
}
func (m *ChatServiceEnhancedServerImpl) addHandler(srv ChatServiceServer) {
	m.handlers = append(m.handlers, srv)
}
func (m *ChatServiceEnhancedServerImpl) filter(ctx context.Context) []ChatServiceServer {
	var ret []ChatServiceServer
	for _, i := range m.handlers {
		valid := true
		for _, filter := range m.filters {
			if !filter(ctx, i) {
				valid = false
				break
			}
			if valid {
				ret = append(ret, i)
			}
		}
	}
	return ret
}

func (m *ChatServiceEnhancedServerImpl) PutRoom(ctx context.Context, r *PutRoomRequest) (*PutRoomResponse, error) {
	for _, handler := range m.filter(ctx) {
		return handler.PutRoom(ctx, r)
	}
	return nil, status.Errorf(codes.Unimplemented, "method PutRoom not implemented")
}

func (m *ChatServiceEnhancedServerImpl) DeleteRoom(ctx context.Context, r *DeleteRoomRequest) (*DeleteRoomResponse, error) {
	for _, handler := range m.filter(ctx) {
		return handler.DeleteRoom(ctx, r)
	}
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoom not implemented")
}

func (m *ChatServiceEnhancedServerImpl) ListRooms(r *ListRoomsRequest, s ChatService_ListRoomsServer) error {
	for _, handler := range m.filter(s.Context()) {
		return handler.ListRooms(r, s)
	}
	return status.Errorf(codes.Unimplemented, "method ListRooms not implemented")
}

func (m *ChatServiceEnhancedServerImpl) ListMessages(r *ListMessagesRequest, s ChatService_ListMessagesServer) error {
	for _, handler := range m.filter(s.Context()) {
		return handler.ListMessages(r, s)
	}
	return status.Errorf(codes.Unimplemented, "method ListMessages not implemented")
}

func (m *ChatServiceEnhancedServerImpl) PostMessage(ctx context.Context, r *PostMessageRequest) (*PostMessageResponse, error) {
	for _, handler := range m.filter(ctx) {
		return handler.PostMessage(ctx, r)
	}
	return nil, status.Errorf(codes.Unimplemented, "method PostMessage not implemented")
}

func (m *ChatServiceEnhancedServerImpl) DeleteMessage(ctx context.Context, r *DeleteMessageRequest) (*DeleteMessageResponse, error) {
	for _, handler := range m.filter(ctx) {
		return handler.DeleteMessage(ctx, r)
	}
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (m *ChatServiceEnhancedServerImpl) mustEmbedUnimplementedChatServiceServer() {}
func RegisterChatServiceEnhancedServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	idServer, ok := s.(idChatServiceServer)
	if ok {
		enhancedChatServiceServersLock.Lock()
		defer enhancedChatServiceServersLock.Unlock()
		instance, ok := enhancedChatServiceServers[idServer.ID()]
		if !ok {
			instance = &ChatServiceEnhancedServerImpl{}
			enhancedChatServiceServers[idServer.ID()] = instance
		}
		instance.addHandler(srv)
		RegisterChatServiceServer(s, instance)
	} else {
		RegisterChatServiceServer(s, srv)
	}
}
