// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             (unknown)
// source: cells-install.proto

package install

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	sync "sync"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

var (
	enhancedInstallServers     = make(map[string]InstallEnhancedServer)
	enhancedInstallServersLock = sync.RWMutex{}
)

type idInstallServer interface {
	ID() string
}
type InstallEnhancedServer interface {
	InstallServer
	AddFilter(func(context.Context, interface{}) bool)
	addHandler(InstallServer)
	filter(context.Context) []InstallServer
}
type InstallEnhancedServerImpl struct {
	filters  []func(context.Context, interface{}) bool
	handlers []InstallServer
}

func (m *InstallEnhancedServerImpl) AddFilter(f func(context.Context, interface{}) bool) {
	m.filters = append(m.filters, f)
}
func (m *InstallEnhancedServerImpl) addHandler(srv InstallServer) {
	m.handlers = append(m.handlers, srv)
}
func (m *InstallEnhancedServerImpl) filter(ctx context.Context) []InstallServer {
	var ret []InstallServer
	for _, i := range m.handlers {
		valid := true
		for _, filter := range m.filters {
			if !filter(ctx, i) {
				valid = false
				break
			}
			if valid {
				ret = append(ret, i)
			}
		}
	}
	return ret
}

func (m *InstallEnhancedServerImpl) GetDefaults(ctx context.Context, r *GetDefaultsRequest) (*GetDefaultsResponse, error) {
	for _, handler := range m.filter(ctx) {
		return handler.GetDefaults(ctx, r)
	}
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaults not implemented")
}

func (m *InstallEnhancedServerImpl) Install(ctx context.Context, r *InstallRequest) (*InstallResponse, error) {
	for _, handler := range m.filter(ctx) {
		return handler.Install(ctx, r)
	}
	return nil, status.Errorf(codes.Unimplemented, "method Install not implemented")
}

func (m *InstallEnhancedServerImpl) PerformCheck(ctx context.Context, r *PerformCheckRequest) (*PerformCheckResponse, error) {
	for _, handler := range m.filter(ctx) {
		return handler.PerformCheck(ctx, r)
	}
	return nil, status.Errorf(codes.Unimplemented, "method PerformCheck not implemented")
}
func (m *InstallEnhancedServerImpl) mustEmbedUnimplementedInstallServer() {}
func RegisterInstallEnhancedServer(s grpc.ServiceRegistrar, srv InstallServer) {
	idServer, ok := s.(idInstallServer)
	if ok {
		enhancedInstallServersLock.Lock()
		defer enhancedInstallServersLock.Unlock()
		instance, ok := enhancedInstallServers[idServer.ID()]
		if !ok {
			instance = &InstallEnhancedServerImpl{}
			enhancedInstallServers[idServer.ID()] = instance
		}
		instance.addHandler(srv)
		RegisterInstallServer(s, instance)
	} else {
		RegisterInstallServer(s, srv)
	}
}
