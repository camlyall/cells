// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             (unknown)
// source: cells-update.proto

package update

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	sync "sync"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

var (
	enhancedUpdateServiceServers     = make(map[string]UpdateServiceEnhancedServer)
	enhancedUpdateServiceServersLock = sync.RWMutex{}
)

type idUpdateServiceServer interface {
	ID() string
}
type UpdateServiceEnhancedServer interface {
	UpdateServiceServer
	AddFilter(func(context.Context, interface{}) bool)
	addHandler(UpdateServiceServer)
	filter(context.Context) []UpdateServiceServer
}
type UpdateServiceEnhancedServerImpl struct {
	filters  []func(context.Context, interface{}) bool
	handlers []UpdateServiceServer
}

func (m *UpdateServiceEnhancedServerImpl) AddFilter(f func(context.Context, interface{}) bool) {
	m.filters = append(m.filters, f)
}
func (m *UpdateServiceEnhancedServerImpl) addHandler(srv UpdateServiceServer) {
	m.handlers = append(m.handlers, srv)
}
func (m *UpdateServiceEnhancedServerImpl) filter(ctx context.Context) []UpdateServiceServer {
	var ret []UpdateServiceServer
	for _, i := range m.handlers {
		valid := true
		for _, filter := range m.filters {
			if !filter(ctx, i) {
				valid = false
				break
			}
			if valid {
				ret = append(ret, i)
			}
		}
	}
	return ret
}

func (m *UpdateServiceEnhancedServerImpl) UpdateRequired(ctx context.Context, r *UpdateRequest) (*UpdateResponse, error) {
	for _, handler := range m.filter(ctx) {
		return handler.UpdateRequired(ctx, r)
	}
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRequired not implemented")
}

func (m *UpdateServiceEnhancedServerImpl) ApplyUpdate(ctx context.Context, r *ApplyUpdateRequest) (*ApplyUpdateResponse, error) {
	for _, handler := range m.filter(ctx) {
		return handler.ApplyUpdate(ctx, r)
	}
	return nil, status.Errorf(codes.Unimplemented, "method ApplyUpdate not implemented")
}
func (m *UpdateServiceEnhancedServerImpl) mustEmbedUnimplementedUpdateServiceServer() {}
func RegisterUpdateServiceEnhancedServer(s grpc.ServiceRegistrar, srv UpdateServiceServer) {
	idServer, ok := s.(idUpdateServiceServer)
	if ok {
		enhancedUpdateServiceServersLock.Lock()
		defer enhancedUpdateServiceServersLock.Unlock()
		instance, ok := enhancedUpdateServiceServers[idServer.ID()]
		if !ok {
			instance = &UpdateServiceEnhancedServerImpl{}
			enhancedUpdateServiceServers[idServer.ID()] = instance
		}
		instance.addHandler(srv)
		RegisterUpdateServiceServer(s, instance)
	} else {
		RegisterUpdateServiceServer(s, srv)
	}
}

var (
	enhancedUpdateServerServiceServers     = make(map[string]UpdateServerServiceEnhancedServer)
	enhancedUpdateServerServiceServersLock = sync.RWMutex{}
)

type idUpdateServerServiceServer interface {
	ID() string
}
type UpdateServerServiceEnhancedServer interface {
	UpdateServerServiceServer
	AddFilter(func(context.Context, interface{}) bool)
	addHandler(UpdateServerServiceServer)
	filter(context.Context) []UpdateServerServiceServer
}
type UpdateServerServiceEnhancedServerImpl struct {
	filters  []func(context.Context, interface{}) bool
	handlers []UpdateServerServiceServer
}

func (m *UpdateServerServiceEnhancedServerImpl) AddFilter(f func(context.Context, interface{}) bool) {
	m.filters = append(m.filters, f)
}
func (m *UpdateServerServiceEnhancedServerImpl) addHandler(srv UpdateServerServiceServer) {
	m.handlers = append(m.handlers, srv)
}
func (m *UpdateServerServiceEnhancedServerImpl) filter(ctx context.Context) []UpdateServerServiceServer {
	var ret []UpdateServerServiceServer
	for _, i := range m.handlers {
		valid := true
		for _, filter := range m.filters {
			if !filter(ctx, i) {
				valid = false
				break
			}
			if valid {
				ret = append(ret, i)
			}
		}
	}
	return ret
}

// Ask the update server if there are any available updates

func (m *UpdateServerServiceEnhancedServerImpl) CheckForUpdate(ctx context.Context, r *UpdateRequest) (*UpdateResponse, error) {
	for _, handler := range m.filter(ctx) {
		return handler.CheckForUpdate(ctx, r)
	}
	return nil, status.Errorf(codes.Unimplemented, "method CheckForUpdate not implemented")
}

func (m *UpdateServerServiceEnhancedServerImpl) PublishPackage(ctx context.Context, r *PublishPackageRequest) (*PublishPackageResponse, error) {
	for _, handler := range m.filter(ctx) {
		return handler.PublishPackage(ctx, r)
	}
	return nil, status.Errorf(codes.Unimplemented, "method PublishPackage not implemented")
}

func (m *UpdateServerServiceEnhancedServerImpl) ListPackages(ctx context.Context, r *ListPackagesRequest) (*ListPackagesResponse, error) {
	for _, handler := range m.filter(ctx) {
		return handler.ListPackages(ctx, r)
	}
	return nil, status.Errorf(codes.Unimplemented, "method ListPackages not implemented")
}

func (m *UpdateServerServiceEnhancedServerImpl) DeletePackage(ctx context.Context, r *DeletePackageRequest) (*DeletePackageResponse, error) {
	for _, handler := range m.filter(ctx) {
		return handler.DeletePackage(ctx, r)
	}
	return nil, status.Errorf(codes.Unimplemented, "method DeletePackage not implemented")
}
func (m *UpdateServerServiceEnhancedServerImpl) mustEmbedUnimplementedUpdateServerServiceServer() {}
func RegisterUpdateServerServiceEnhancedServer(s grpc.ServiceRegistrar, srv UpdateServerServiceServer) {
	idServer, ok := s.(idUpdateServerServiceServer)
	if ok {
		enhancedUpdateServerServiceServersLock.Lock()
		defer enhancedUpdateServerServiceServersLock.Unlock()
		instance, ok := enhancedUpdateServerServiceServers[idServer.ID()]
		if !ok {
			instance = &UpdateServerServiceEnhancedServerImpl{}
			enhancedUpdateServerServiceServers[idServer.ID()] = instance
		}
		instance.addHandler(srv)
		RegisterUpdateServerServiceServer(s, instance)
	} else {
		RegisterUpdateServerServiceServer(s, srv)
	}
}
