// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             (unknown)
// source: cells-object.proto

package object

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	sync "sync"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

var (
	enhancedObjectsEndpointServers     = make(map[string]ObjectsEndpointEnhancedServer)
	enhancedObjectsEndpointServersLock = sync.RWMutex{}
)

type idObjectsEndpointServer interface {
	ID() string
}
type ObjectsEndpointEnhancedServer interface {
	ObjectsEndpointServer
	AddFilter(func(context.Context, interface{}) bool)
	addHandler(ObjectsEndpointServer)
	filter(context.Context) []ObjectsEndpointServer
}
type ObjectsEndpointEnhancedServerImpl struct {
	filters  []func(context.Context, interface{}) bool
	handlers []ObjectsEndpointServer
}

func (m *ObjectsEndpointEnhancedServerImpl) AddFilter(f func(context.Context, interface{}) bool) {
	m.filters = append(m.filters, f)
}
func (m *ObjectsEndpointEnhancedServerImpl) addHandler(srv ObjectsEndpointServer) {
	m.handlers = append(m.handlers, srv)
}
func (m *ObjectsEndpointEnhancedServerImpl) filter(ctx context.Context) []ObjectsEndpointServer {
	var ret []ObjectsEndpointServer
	for _, i := range m.handlers {
		valid := true
		for _, filter := range m.filters {
			if !filter(ctx, i) {
				valid = false
				break
			}
			if valid {
				ret = append(ret, i)
			}
		}
	}
	return ret
}

func (m *ObjectsEndpointEnhancedServerImpl) GetMinioConfig(ctx context.Context, r *GetMinioConfigRequest) (*GetMinioConfigResponse, error) {
	for _, handler := range m.filter(ctx) {
		return handler.GetMinioConfig(ctx, r)
	}
	return nil, status.Errorf(codes.Unimplemented, "method GetMinioConfig not implemented")
}

func (m *ObjectsEndpointEnhancedServerImpl) StorageStats(ctx context.Context, r *StorageStatsRequest) (*StorageStatsResponse, error) {
	for _, handler := range m.filter(ctx) {
		return handler.StorageStats(ctx, r)
	}
	return nil, status.Errorf(codes.Unimplemented, "method StorageStats not implemented")
}
func (m *ObjectsEndpointEnhancedServerImpl) mustEmbedUnimplementedObjectsEndpointServer() {}
func RegisterObjectsEndpointEnhancedServer(s grpc.ServiceRegistrar, srv ObjectsEndpointServer) {
	idServer, ok := s.(idObjectsEndpointServer)
	if ok {
		enhancedObjectsEndpointServersLock.Lock()
		defer enhancedObjectsEndpointServersLock.Unlock()
		instance, ok := enhancedObjectsEndpointServers[idServer.ID()]
		if !ok {
			instance = &ObjectsEndpointEnhancedServerImpl{}
			enhancedObjectsEndpointServers[idServer.ID()] = instance
		}
		instance.addHandler(srv)
		RegisterObjectsEndpointServer(s, instance)
	} else {
		RegisterObjectsEndpointServer(s, srv)
	}
}

var (
	enhancedDataSourceEndpointServers     = make(map[string]DataSourceEndpointEnhancedServer)
	enhancedDataSourceEndpointServersLock = sync.RWMutex{}
)

type idDataSourceEndpointServer interface {
	ID() string
}
type DataSourceEndpointEnhancedServer interface {
	DataSourceEndpointServer
	AddFilter(func(context.Context, interface{}) bool)
	addHandler(DataSourceEndpointServer)
	filter(context.Context) []DataSourceEndpointServer
}
type DataSourceEndpointEnhancedServerImpl struct {
	filters  []func(context.Context, interface{}) bool
	handlers []DataSourceEndpointServer
}

func (m *DataSourceEndpointEnhancedServerImpl) AddFilter(f func(context.Context, interface{}) bool) {
	m.filters = append(m.filters, f)
}
func (m *DataSourceEndpointEnhancedServerImpl) addHandler(srv DataSourceEndpointServer) {
	m.handlers = append(m.handlers, srv)
}
func (m *DataSourceEndpointEnhancedServerImpl) filter(ctx context.Context) []DataSourceEndpointServer {
	var ret []DataSourceEndpointServer
	for _, i := range m.handlers {
		valid := true
		for _, filter := range m.filters {
			if !filter(ctx, i) {
				valid = false
				break
			}
			if valid {
				ret = append(ret, i)
			}
		}
	}
	return ret
}

func (m *DataSourceEndpointEnhancedServerImpl) GetDataSourceConfig(ctx context.Context, r *GetDataSourceConfigRequest) (*GetDataSourceConfigResponse, error) {
	for _, handler := range m.filter(ctx) {
		return handler.GetDataSourceConfig(ctx, r)
	}
	return nil, status.Errorf(codes.Unimplemented, "method GetDataSourceConfig not implemented")
}
func (m *DataSourceEndpointEnhancedServerImpl) mustEmbedUnimplementedDataSourceEndpointServer() {}
func RegisterDataSourceEndpointEnhancedServer(s grpc.ServiceRegistrar, srv DataSourceEndpointServer) {
	idServer, ok := s.(idDataSourceEndpointServer)
	if ok {
		enhancedDataSourceEndpointServersLock.Lock()
		defer enhancedDataSourceEndpointServersLock.Unlock()
		instance, ok := enhancedDataSourceEndpointServers[idServer.ID()]
		if !ok {
			instance = &DataSourceEndpointEnhancedServerImpl{}
			enhancedDataSourceEndpointServers[idServer.ID()] = instance
		}
		instance.addHandler(srv)
		RegisterDataSourceEndpointServer(s, instance)
	} else {
		RegisterDataSourceEndpointServer(s, srv)
	}
}

var (
	enhancedResourceCleanerEndpointServers     = make(map[string]ResourceCleanerEndpointEnhancedServer)
	enhancedResourceCleanerEndpointServersLock = sync.RWMutex{}
)

type idResourceCleanerEndpointServer interface {
	ID() string
}
type ResourceCleanerEndpointEnhancedServer interface {
	ResourceCleanerEndpointServer
	AddFilter(func(context.Context, interface{}) bool)
	addHandler(ResourceCleanerEndpointServer)
	filter(context.Context) []ResourceCleanerEndpointServer
}
type ResourceCleanerEndpointEnhancedServerImpl struct {
	filters  []func(context.Context, interface{}) bool
	handlers []ResourceCleanerEndpointServer
}

func (m *ResourceCleanerEndpointEnhancedServerImpl) AddFilter(f func(context.Context, interface{}) bool) {
	m.filters = append(m.filters, f)
}
func (m *ResourceCleanerEndpointEnhancedServerImpl) addHandler(srv ResourceCleanerEndpointServer) {
	m.handlers = append(m.handlers, srv)
}
func (m *ResourceCleanerEndpointEnhancedServerImpl) filter(ctx context.Context) []ResourceCleanerEndpointServer {
	var ret []ResourceCleanerEndpointServer
	for _, i := range m.handlers {
		valid := true
		for _, filter := range m.filters {
			if !filter(ctx, i) {
				valid = false
				break
			}
			if valid {
				ret = append(ret, i)
			}
		}
	}
	return ret
}

func (m *ResourceCleanerEndpointEnhancedServerImpl) CleanResourcesBeforeDelete(ctx context.Context, r *CleanResourcesRequest) (*CleanResourcesResponse, error) {
	for _, handler := range m.filter(ctx) {
		return handler.CleanResourcesBeforeDelete(ctx, r)
	}
	return nil, status.Errorf(codes.Unimplemented, "method CleanResourcesBeforeDelete not implemented")
}
func (m *ResourceCleanerEndpointEnhancedServerImpl) mustEmbedUnimplementedResourceCleanerEndpointServer() {
}
func RegisterResourceCleanerEndpointEnhancedServer(s grpc.ServiceRegistrar, srv ResourceCleanerEndpointServer) {
	idServer, ok := s.(idResourceCleanerEndpointServer)
	if ok {
		enhancedResourceCleanerEndpointServersLock.Lock()
		defer enhancedResourceCleanerEndpointServersLock.Unlock()
		instance, ok := enhancedResourceCleanerEndpointServers[idServer.ID()]
		if !ok {
			instance = &ResourceCleanerEndpointEnhancedServerImpl{}
			enhancedResourceCleanerEndpointServers[idServer.ID()] = instance
		}
		instance.addHandler(srv)
		RegisterResourceCleanerEndpointServer(s, instance)
	} else {
		RegisterResourceCleanerEndpointServer(s, srv)
	}
}
