// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             (unknown)
// source: cells-docstore.proto

package docstore

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	sync "sync"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

var (
	enhancedDocStoreServers     = make(map[string]DocStoreEnhancedServer)
	enhancedDocStoreServersLock = sync.RWMutex{}
)

type idDocStoreServer interface {
	ID() string
}
type DocStoreEnhancedServer interface {
	DocStoreServer
	AddFilter(func(context.Context, interface{}) bool)
	addHandler(DocStoreServer)
	filter(context.Context) []DocStoreServer
}
type DocStoreEnhancedServerImpl struct {
	filters  []func(context.Context, interface{}) bool
	handlers []DocStoreServer
}

func (m *DocStoreEnhancedServerImpl) AddFilter(f func(context.Context, interface{}) bool) {
	m.filters = append(m.filters, f)
}
func (m *DocStoreEnhancedServerImpl) addHandler(srv DocStoreServer) {
	m.handlers = append(m.handlers, srv)
}
func (m *DocStoreEnhancedServerImpl) filter(ctx context.Context) []DocStoreServer {
	var ret []DocStoreServer
	for _, i := range m.handlers {
		valid := true
		for _, filter := range m.filters {
			if !filter(ctx, i) {
				valid = false
				break
			}
			if valid {
				ret = append(ret, i)
			}
		}
	}
	return ret
}

func (m *DocStoreEnhancedServerImpl) PutDocument(ctx context.Context, r *PutDocumentRequest) (*PutDocumentResponse, error) {
	for _, handler := range m.filter(ctx) {
		return handler.PutDocument(ctx, r)
	}
	return nil, status.Errorf(codes.Unimplemented, "method PutDocument not implemented")
}

func (m *DocStoreEnhancedServerImpl) GetDocument(ctx context.Context, r *GetDocumentRequest) (*GetDocumentResponse, error) {
	for _, handler := range m.filter(ctx) {
		return handler.GetDocument(ctx, r)
	}
	return nil, status.Errorf(codes.Unimplemented, "method GetDocument not implemented")
}

func (m *DocStoreEnhancedServerImpl) DeleteDocuments(ctx context.Context, r *DeleteDocumentsRequest) (*DeleteDocumentsResponse, error) {
	for _, handler := range m.filter(ctx) {
		return handler.DeleteDocuments(ctx, r)
	}
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDocuments not implemented")
}

func (m *DocStoreEnhancedServerImpl) CountDocuments(ctx context.Context, r *ListDocumentsRequest) (*CountDocumentsResponse, error) {
	for _, handler := range m.filter(ctx) {
		return handler.CountDocuments(ctx, r)
	}
	return nil, status.Errorf(codes.Unimplemented, "method CountDocuments not implemented")
}

func (m *DocStoreEnhancedServerImpl) ListDocuments(r *ListDocumentsRequest, s DocStore_ListDocumentsServer) error {
	for _, handler := range m.filter(s.Context()) {
		return handler.ListDocuments(r, s)
	}
	return status.Errorf(codes.Unimplemented, "method ListDocuments not implemented")
}
func (m *DocStoreEnhancedServerImpl) mustEmbedUnimplementedDocStoreServer() {}
func RegisterDocStoreEnhancedServer(s grpc.ServiceRegistrar, srv DocStoreServer) {
	idServer, ok := s.(idDocStoreServer)
	if ok {
		enhancedDocStoreServersLock.Lock()
		defer enhancedDocStoreServersLock.Unlock()
		instance, ok := enhancedDocStoreServers[idServer.ID()]
		if !ok {
			instance = &DocStoreEnhancedServerImpl{}
			enhancedDocStoreServers[idServer.ID()] = instance
		}
		instance.addHandler(srv)
		RegisterDocStoreServer(s, instance)
	} else {
		RegisterDocStoreServer(s, srv)
	}
}
