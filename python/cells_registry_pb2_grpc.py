# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import cells_registry_pb2 as cells__registry__pb2


class RegistryStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Start = channel.unary_unary(
                '/registry.Registry/Start',
                request_serializer=cells__registry__pb2.Item.SerializeToString,
                response_deserializer=cells__registry__pb2.EmptyResponse.FromString,
                )
        self.Stop = channel.unary_unary(
                '/registry.Registry/Stop',
                request_serializer=cells__registry__pb2.Item.SerializeToString,
                response_deserializer=cells__registry__pb2.EmptyResponse.FromString,
                )
        self.Get = channel.unary_unary(
                '/registry.Registry/Get',
                request_serializer=cells__registry__pb2.GetRequest.SerializeToString,
                response_deserializer=cells__registry__pb2.GetResponse.FromString,
                )
        self.Register = channel.unary_unary(
                '/registry.Registry/Register',
                request_serializer=cells__registry__pb2.Item.SerializeToString,
                response_deserializer=cells__registry__pb2.EmptyResponse.FromString,
                )
        self.Deregister = channel.unary_unary(
                '/registry.Registry/Deregister',
                request_serializer=cells__registry__pb2.Item.SerializeToString,
                response_deserializer=cells__registry__pb2.EmptyResponse.FromString,
                )
        self.List = channel.unary_unary(
                '/registry.Registry/List',
                request_serializer=cells__registry__pb2.ListRequest.SerializeToString,
                response_deserializer=cells__registry__pb2.ListResponse.FromString,
                )
        self.Watch = channel.unary_stream(
                '/registry.Registry/Watch',
                request_serializer=cells__registry__pb2.WatchRequest.SerializeToString,
                response_deserializer=cells__registry__pb2.Result.FromString,
                )
        self.NewLocker = channel.stream_stream(
                '/registry.Registry/NewLocker',
                request_serializer=cells__registry__pb2.NewLockerRequest.SerializeToString,
                response_deserializer=cells__registry__pb2.NewLockerResponse.FromString,
                )


class RegistryServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Start(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Deregister(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def List(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Watch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NewLocker(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RegistryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Start': grpc.unary_unary_rpc_method_handler(
                    servicer.Start,
                    request_deserializer=cells__registry__pb2.Item.FromString,
                    response_serializer=cells__registry__pb2.EmptyResponse.SerializeToString,
            ),
            'Stop': grpc.unary_unary_rpc_method_handler(
                    servicer.Stop,
                    request_deserializer=cells__registry__pb2.Item.FromString,
                    response_serializer=cells__registry__pb2.EmptyResponse.SerializeToString,
            ),
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=cells__registry__pb2.GetRequest.FromString,
                    response_serializer=cells__registry__pb2.GetResponse.SerializeToString,
            ),
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=cells__registry__pb2.Item.FromString,
                    response_serializer=cells__registry__pb2.EmptyResponse.SerializeToString,
            ),
            'Deregister': grpc.unary_unary_rpc_method_handler(
                    servicer.Deregister,
                    request_deserializer=cells__registry__pb2.Item.FromString,
                    response_serializer=cells__registry__pb2.EmptyResponse.SerializeToString,
            ),
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=cells__registry__pb2.ListRequest.FromString,
                    response_serializer=cells__registry__pb2.ListResponse.SerializeToString,
            ),
            'Watch': grpc.unary_stream_rpc_method_handler(
                    servicer.Watch,
                    request_deserializer=cells__registry__pb2.WatchRequest.FromString,
                    response_serializer=cells__registry__pb2.Result.SerializeToString,
            ),
            'NewLocker': grpc.stream_stream_rpc_method_handler(
                    servicer.NewLocker,
                    request_deserializer=cells__registry__pb2.NewLockerRequest.FromString,
                    response_serializer=cells__registry__pb2.NewLockerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'registry.Registry', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Registry(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Start(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/registry.Registry/Start',
            cells__registry__pb2.Item.SerializeToString,
            cells__registry__pb2.EmptyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Stop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/registry.Registry/Stop',
            cells__registry__pb2.Item.SerializeToString,
            cells__registry__pb2.EmptyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/registry.Registry/Get',
            cells__registry__pb2.GetRequest.SerializeToString,
            cells__registry__pb2.GetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/registry.Registry/Register',
            cells__registry__pb2.Item.SerializeToString,
            cells__registry__pb2.EmptyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Deregister(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/registry.Registry/Deregister',
            cells__registry__pb2.Item.SerializeToString,
            cells__registry__pb2.EmptyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/registry.Registry/List',
            cells__registry__pb2.ListRequest.SerializeToString,
            cells__registry__pb2.ListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Watch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/registry.Registry/Watch',
            cells__registry__pb2.WatchRequest.SerializeToString,
            cells__registry__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NewLocker(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/registry.Registry/NewLocker',
            cells__registry__pb2.NewLockerRequest.SerializeToString,
            cells__registry__pb2.NewLockerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
