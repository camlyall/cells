# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import cells_idm_pb2 as cells__idm__pb2


class RoleServiceStub(object):
    """*****************************************************************************
    Services
    *****************************************************************************
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateRole = channel.unary_unary(
                '/idm.RoleService/CreateRole',
                request_serializer=cells__idm__pb2.CreateRoleRequest.SerializeToString,
                response_deserializer=cells__idm__pb2.CreateRoleResponse.FromString,
                )
        self.DeleteRole = channel.unary_unary(
                '/idm.RoleService/DeleteRole',
                request_serializer=cells__idm__pb2.DeleteRoleRequest.SerializeToString,
                response_deserializer=cells__idm__pb2.DeleteRoleResponse.FromString,
                )
        self.SearchRole = channel.unary_stream(
                '/idm.RoleService/SearchRole',
                request_serializer=cells__idm__pb2.SearchRoleRequest.SerializeToString,
                response_deserializer=cells__idm__pb2.SearchRoleResponse.FromString,
                )
        self.StreamRole = channel.stream_stream(
                '/idm.RoleService/StreamRole',
                request_serializer=cells__idm__pb2.SearchRoleRequest.SerializeToString,
                response_deserializer=cells__idm__pb2.SearchRoleResponse.FromString,
                )
        self.CountRole = channel.unary_unary(
                '/idm.RoleService/CountRole',
                request_serializer=cells__idm__pb2.SearchRoleRequest.SerializeToString,
                response_deserializer=cells__idm__pb2.CountRoleResponse.FromString,
                )


class RoleServiceServicer(object):
    """*****************************************************************************
    Services
    *****************************************************************************
    """

    def CreateRole(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRole(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchRole(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamRole(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CountRole(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RoleServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateRole': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRole,
                    request_deserializer=cells__idm__pb2.CreateRoleRequest.FromString,
                    response_serializer=cells__idm__pb2.CreateRoleResponse.SerializeToString,
            ),
            'DeleteRole': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteRole,
                    request_deserializer=cells__idm__pb2.DeleteRoleRequest.FromString,
                    response_serializer=cells__idm__pb2.DeleteRoleResponse.SerializeToString,
            ),
            'SearchRole': grpc.unary_stream_rpc_method_handler(
                    servicer.SearchRole,
                    request_deserializer=cells__idm__pb2.SearchRoleRequest.FromString,
                    response_serializer=cells__idm__pb2.SearchRoleResponse.SerializeToString,
            ),
            'StreamRole': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamRole,
                    request_deserializer=cells__idm__pb2.SearchRoleRequest.FromString,
                    response_serializer=cells__idm__pb2.SearchRoleResponse.SerializeToString,
            ),
            'CountRole': grpc.unary_unary_rpc_method_handler(
                    servicer.CountRole,
                    request_deserializer=cells__idm__pb2.SearchRoleRequest.FromString,
                    response_serializer=cells__idm__pb2.CountRoleResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'idm.RoleService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RoleService(object):
    """*****************************************************************************
    Services
    *****************************************************************************
    """

    @staticmethod
    def CreateRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/idm.RoleService/CreateRole',
            cells__idm__pb2.CreateRoleRequest.SerializeToString,
            cells__idm__pb2.CreateRoleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/idm.RoleService/DeleteRole',
            cells__idm__pb2.DeleteRoleRequest.SerializeToString,
            cells__idm__pb2.DeleteRoleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SearchRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/idm.RoleService/SearchRole',
            cells__idm__pb2.SearchRoleRequest.SerializeToString,
            cells__idm__pb2.SearchRoleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamRole(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/idm.RoleService/StreamRole',
            cells__idm__pb2.SearchRoleRequest.SerializeToString,
            cells__idm__pb2.SearchRoleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CountRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/idm.RoleService/CountRole',
            cells__idm__pb2.SearchRoleRequest.SerializeToString,
            cells__idm__pb2.CountRoleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class UserServiceStub(object):
    """*****************************************************************************
    Services
    *****************************************************************************
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateUser = channel.unary_unary(
                '/idm.UserService/CreateUser',
                request_serializer=cells__idm__pb2.CreateUserRequest.SerializeToString,
                response_deserializer=cells__idm__pb2.CreateUserResponse.FromString,
                )
        self.DeleteUser = channel.unary_unary(
                '/idm.UserService/DeleteUser',
                request_serializer=cells__idm__pb2.DeleteUserRequest.SerializeToString,
                response_deserializer=cells__idm__pb2.DeleteUserResponse.FromString,
                )
        self.BindUser = channel.unary_unary(
                '/idm.UserService/BindUser',
                request_serializer=cells__idm__pb2.BindUserRequest.SerializeToString,
                response_deserializer=cells__idm__pb2.BindUserResponse.FromString,
                )
        self.CountUser = channel.unary_unary(
                '/idm.UserService/CountUser',
                request_serializer=cells__idm__pb2.SearchUserRequest.SerializeToString,
                response_deserializer=cells__idm__pb2.CountUserResponse.FromString,
                )
        self.SearchUser = channel.unary_stream(
                '/idm.UserService/SearchUser',
                request_serializer=cells__idm__pb2.SearchUserRequest.SerializeToString,
                response_deserializer=cells__idm__pb2.SearchUserResponse.FromString,
                )
        self.StreamUser = channel.stream_stream(
                '/idm.UserService/StreamUser',
                request_serializer=cells__idm__pb2.SearchUserRequest.SerializeToString,
                response_deserializer=cells__idm__pb2.SearchUserResponse.FromString,
                )


class UserServiceServicer(object):
    """*****************************************************************************
    Services
    *****************************************************************************
    """

    def CreateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BindUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CountUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamUser(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateUser,
                    request_deserializer=cells__idm__pb2.CreateUserRequest.FromString,
                    response_serializer=cells__idm__pb2.CreateUserResponse.SerializeToString,
            ),
            'DeleteUser': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteUser,
                    request_deserializer=cells__idm__pb2.DeleteUserRequest.FromString,
                    response_serializer=cells__idm__pb2.DeleteUserResponse.SerializeToString,
            ),
            'BindUser': grpc.unary_unary_rpc_method_handler(
                    servicer.BindUser,
                    request_deserializer=cells__idm__pb2.BindUserRequest.FromString,
                    response_serializer=cells__idm__pb2.BindUserResponse.SerializeToString,
            ),
            'CountUser': grpc.unary_unary_rpc_method_handler(
                    servicer.CountUser,
                    request_deserializer=cells__idm__pb2.SearchUserRequest.FromString,
                    response_serializer=cells__idm__pb2.CountUserResponse.SerializeToString,
            ),
            'SearchUser': grpc.unary_stream_rpc_method_handler(
                    servicer.SearchUser,
                    request_deserializer=cells__idm__pb2.SearchUserRequest.FromString,
                    response_serializer=cells__idm__pb2.SearchUserResponse.SerializeToString,
            ),
            'StreamUser': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamUser,
                    request_deserializer=cells__idm__pb2.SearchUserRequest.FromString,
                    response_serializer=cells__idm__pb2.SearchUserResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'idm.UserService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UserService(object):
    """*****************************************************************************
    Services
    *****************************************************************************
    """

    @staticmethod
    def CreateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/idm.UserService/CreateUser',
            cells__idm__pb2.CreateUserRequest.SerializeToString,
            cells__idm__pb2.CreateUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/idm.UserService/DeleteUser',
            cells__idm__pb2.DeleteUserRequest.SerializeToString,
            cells__idm__pb2.DeleteUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BindUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/idm.UserService/BindUser',
            cells__idm__pb2.BindUserRequest.SerializeToString,
            cells__idm__pb2.BindUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CountUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/idm.UserService/CountUser',
            cells__idm__pb2.SearchUserRequest.SerializeToString,
            cells__idm__pb2.CountUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SearchUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/idm.UserService/SearchUser',
            cells__idm__pb2.SearchUserRequest.SerializeToString,
            cells__idm__pb2.SearchUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamUser(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/idm.UserService/StreamUser',
            cells__idm__pb2.SearchUserRequest.SerializeToString,
            cells__idm__pb2.SearchUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class WorkspaceServiceStub(object):
    """*****************************************************************************
    Services Worskpace
    *****************************************************************************
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateWorkspace = channel.unary_unary(
                '/idm.WorkspaceService/CreateWorkspace',
                request_serializer=cells__idm__pb2.CreateWorkspaceRequest.SerializeToString,
                response_deserializer=cells__idm__pb2.CreateWorkspaceResponse.FromString,
                )
        self.DeleteWorkspace = channel.unary_unary(
                '/idm.WorkspaceService/DeleteWorkspace',
                request_serializer=cells__idm__pb2.DeleteWorkspaceRequest.SerializeToString,
                response_deserializer=cells__idm__pb2.DeleteWorkspaceResponse.FromString,
                )
        self.SearchWorkspace = channel.unary_stream(
                '/idm.WorkspaceService/SearchWorkspace',
                request_serializer=cells__idm__pb2.SearchWorkspaceRequest.SerializeToString,
                response_deserializer=cells__idm__pb2.SearchWorkspaceResponse.FromString,
                )
        self.StreamWorkspace = channel.stream_stream(
                '/idm.WorkspaceService/StreamWorkspace',
                request_serializer=cells__idm__pb2.SearchWorkspaceRequest.SerializeToString,
                response_deserializer=cells__idm__pb2.SearchWorkspaceResponse.FromString,
                )


class WorkspaceServiceServicer(object):
    """*****************************************************************************
    Services Worskpace
    *****************************************************************************
    """

    def CreateWorkspace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteWorkspace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchWorkspace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamWorkspace(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WorkspaceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateWorkspace': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateWorkspace,
                    request_deserializer=cells__idm__pb2.CreateWorkspaceRequest.FromString,
                    response_serializer=cells__idm__pb2.CreateWorkspaceResponse.SerializeToString,
            ),
            'DeleteWorkspace': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteWorkspace,
                    request_deserializer=cells__idm__pb2.DeleteWorkspaceRequest.FromString,
                    response_serializer=cells__idm__pb2.DeleteWorkspaceResponse.SerializeToString,
            ),
            'SearchWorkspace': grpc.unary_stream_rpc_method_handler(
                    servicer.SearchWorkspace,
                    request_deserializer=cells__idm__pb2.SearchWorkspaceRequest.FromString,
                    response_serializer=cells__idm__pb2.SearchWorkspaceResponse.SerializeToString,
            ),
            'StreamWorkspace': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamWorkspace,
                    request_deserializer=cells__idm__pb2.SearchWorkspaceRequest.FromString,
                    response_serializer=cells__idm__pb2.SearchWorkspaceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'idm.WorkspaceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WorkspaceService(object):
    """*****************************************************************************
    Services Worskpace
    *****************************************************************************
    """

    @staticmethod
    def CreateWorkspace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/idm.WorkspaceService/CreateWorkspace',
            cells__idm__pb2.CreateWorkspaceRequest.SerializeToString,
            cells__idm__pb2.CreateWorkspaceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteWorkspace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/idm.WorkspaceService/DeleteWorkspace',
            cells__idm__pb2.DeleteWorkspaceRequest.SerializeToString,
            cells__idm__pb2.DeleteWorkspaceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SearchWorkspace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/idm.WorkspaceService/SearchWorkspace',
            cells__idm__pb2.SearchWorkspaceRequest.SerializeToString,
            cells__idm__pb2.SearchWorkspaceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamWorkspace(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/idm.WorkspaceService/StreamWorkspace',
            cells__idm__pb2.SearchWorkspaceRequest.SerializeToString,
            cells__idm__pb2.SearchWorkspaceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ACLServiceStub(object):
    """*****************************************************************************
    ACL Services
    *****************************************************************************
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateACL = channel.unary_unary(
                '/idm.ACLService/CreateACL',
                request_serializer=cells__idm__pb2.CreateACLRequest.SerializeToString,
                response_deserializer=cells__idm__pb2.CreateACLResponse.FromString,
                )
        self.ExpireACL = channel.unary_unary(
                '/idm.ACLService/ExpireACL',
                request_serializer=cells__idm__pb2.ExpireACLRequest.SerializeToString,
                response_deserializer=cells__idm__pb2.ExpireACLResponse.FromString,
                )
        self.DeleteACL = channel.unary_unary(
                '/idm.ACLService/DeleteACL',
                request_serializer=cells__idm__pb2.DeleteACLRequest.SerializeToString,
                response_deserializer=cells__idm__pb2.DeleteACLResponse.FromString,
                )
        self.SearchACL = channel.unary_stream(
                '/idm.ACLService/SearchACL',
                request_serializer=cells__idm__pb2.SearchACLRequest.SerializeToString,
                response_deserializer=cells__idm__pb2.SearchACLResponse.FromString,
                )
        self.StreamACL = channel.stream_stream(
                '/idm.ACLService/StreamACL',
                request_serializer=cells__idm__pb2.SearchACLRequest.SerializeToString,
                response_deserializer=cells__idm__pb2.SearchACLResponse.FromString,
                )
        self.RestoreACL = channel.unary_unary(
                '/idm.ACLService/RestoreACL',
                request_serializer=cells__idm__pb2.RestoreACLRequest.SerializeToString,
                response_deserializer=cells__idm__pb2.RestoreACLResponse.FromString,
                )


class ACLServiceServicer(object):
    """*****************************************************************************
    ACL Services
    *****************************************************************************
    """

    def CreateACL(self, request, context):
        """Insert a new ACL
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExpireACL(self, request, context):
        """Set an expiration date that invalidates an ACL without deleting it
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteACL(self, request, context):
        """Definitely delete an ACL
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchACL(self, request, context):
        """Search ACLs by Query or Expiration period
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamACL(self, request_iterator, context):
        """Stream version of Search ACL
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RestoreACL(self, request, context):
        """Restore ACLs based on Query and Expiration period
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ACLServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateACL': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateACL,
                    request_deserializer=cells__idm__pb2.CreateACLRequest.FromString,
                    response_serializer=cells__idm__pb2.CreateACLResponse.SerializeToString,
            ),
            'ExpireACL': grpc.unary_unary_rpc_method_handler(
                    servicer.ExpireACL,
                    request_deserializer=cells__idm__pb2.ExpireACLRequest.FromString,
                    response_serializer=cells__idm__pb2.ExpireACLResponse.SerializeToString,
            ),
            'DeleteACL': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteACL,
                    request_deserializer=cells__idm__pb2.DeleteACLRequest.FromString,
                    response_serializer=cells__idm__pb2.DeleteACLResponse.SerializeToString,
            ),
            'SearchACL': grpc.unary_stream_rpc_method_handler(
                    servicer.SearchACL,
                    request_deserializer=cells__idm__pb2.SearchACLRequest.FromString,
                    response_serializer=cells__idm__pb2.SearchACLResponse.SerializeToString,
            ),
            'StreamACL': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamACL,
                    request_deserializer=cells__idm__pb2.SearchACLRequest.FromString,
                    response_serializer=cells__idm__pb2.SearchACLResponse.SerializeToString,
            ),
            'RestoreACL': grpc.unary_unary_rpc_method_handler(
                    servicer.RestoreACL,
                    request_deserializer=cells__idm__pb2.RestoreACLRequest.FromString,
                    response_serializer=cells__idm__pb2.RestoreACLResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'idm.ACLService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ACLService(object):
    """*****************************************************************************
    ACL Services
    *****************************************************************************
    """

    @staticmethod
    def CreateACL(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/idm.ACLService/CreateACL',
            cells__idm__pb2.CreateACLRequest.SerializeToString,
            cells__idm__pb2.CreateACLResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExpireACL(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/idm.ACLService/ExpireACL',
            cells__idm__pb2.ExpireACLRequest.SerializeToString,
            cells__idm__pb2.ExpireACLResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteACL(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/idm.ACLService/DeleteACL',
            cells__idm__pb2.DeleteACLRequest.SerializeToString,
            cells__idm__pb2.DeleteACLResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SearchACL(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/idm.ACLService/SearchACL',
            cells__idm__pb2.SearchACLRequest.SerializeToString,
            cells__idm__pb2.SearchACLResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamACL(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/idm.ACLService/StreamACL',
            cells__idm__pb2.SearchACLRequest.SerializeToString,
            cells__idm__pb2.SearchACLResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RestoreACL(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/idm.ACLService/RestoreACL',
            cells__idm__pb2.RestoreACLRequest.SerializeToString,
            cells__idm__pb2.RestoreACLResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class UserMetaServiceStub(object):
    """UserMetaService is a dedicated Metadata Service that implements the ResourcePolicy model,
    thus providing Read/Write authorizations at a fine-grained level.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UpdateUserMeta = channel.unary_unary(
                '/idm.UserMetaService/UpdateUserMeta',
                request_serializer=cells__idm__pb2.UpdateUserMetaRequest.SerializeToString,
                response_deserializer=cells__idm__pb2.UpdateUserMetaResponse.FromString,
                )
        self.SearchUserMeta = channel.unary_stream(
                '/idm.UserMetaService/SearchUserMeta',
                request_serializer=cells__idm__pb2.SearchUserMetaRequest.SerializeToString,
                response_deserializer=cells__idm__pb2.SearchUserMetaResponse.FromString,
                )
        self.UpdateUserMetaNamespace = channel.unary_unary(
                '/idm.UserMetaService/UpdateUserMetaNamespace',
                request_serializer=cells__idm__pb2.UpdateUserMetaNamespaceRequest.SerializeToString,
                response_deserializer=cells__idm__pb2.UpdateUserMetaNamespaceResponse.FromString,
                )
        self.ListUserMetaNamespace = channel.unary_stream(
                '/idm.UserMetaService/ListUserMetaNamespace',
                request_serializer=cells__idm__pb2.ListUserMetaNamespaceRequest.SerializeToString,
                response_deserializer=cells__idm__pb2.ListUserMetaNamespaceResponse.FromString,
                )


class UserMetaServiceServicer(object):
    """UserMetaService is a dedicated Metadata Service that implements the ResourcePolicy model,
    thus providing Read/Write authorizations at a fine-grained level.
    """

    def UpdateUserMeta(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchUserMeta(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUserMetaNamespace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListUserMetaNamespace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserMetaServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UpdateUserMeta': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUserMeta,
                    request_deserializer=cells__idm__pb2.UpdateUserMetaRequest.FromString,
                    response_serializer=cells__idm__pb2.UpdateUserMetaResponse.SerializeToString,
            ),
            'SearchUserMeta': grpc.unary_stream_rpc_method_handler(
                    servicer.SearchUserMeta,
                    request_deserializer=cells__idm__pb2.SearchUserMetaRequest.FromString,
                    response_serializer=cells__idm__pb2.SearchUserMetaResponse.SerializeToString,
            ),
            'UpdateUserMetaNamespace': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUserMetaNamespace,
                    request_deserializer=cells__idm__pb2.UpdateUserMetaNamespaceRequest.FromString,
                    response_serializer=cells__idm__pb2.UpdateUserMetaNamespaceResponse.SerializeToString,
            ),
            'ListUserMetaNamespace': grpc.unary_stream_rpc_method_handler(
                    servicer.ListUserMetaNamespace,
                    request_deserializer=cells__idm__pb2.ListUserMetaNamespaceRequest.FromString,
                    response_serializer=cells__idm__pb2.ListUserMetaNamespaceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'idm.UserMetaService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UserMetaService(object):
    """UserMetaService is a dedicated Metadata Service that implements the ResourcePolicy model,
    thus providing Read/Write authorizations at a fine-grained level.
    """

    @staticmethod
    def UpdateUserMeta(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/idm.UserMetaService/UpdateUserMeta',
            cells__idm__pb2.UpdateUserMetaRequest.SerializeToString,
            cells__idm__pb2.UpdateUserMetaResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SearchUserMeta(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/idm.UserMetaService/SearchUserMeta',
            cells__idm__pb2.SearchUserMetaRequest.SerializeToString,
            cells__idm__pb2.SearchUserMetaResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateUserMetaNamespace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/idm.UserMetaService/UpdateUserMetaNamespace',
            cells__idm__pb2.UpdateUserMetaNamespaceRequest.SerializeToString,
            cells__idm__pb2.UpdateUserMetaNamespaceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListUserMetaNamespace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/idm.UserMetaService/ListUserMetaNamespace',
            cells__idm__pb2.ListUserMetaNamespaceRequest.SerializeToString,
            cells__idm__pb2.ListUserMetaNamespaceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class PolicyEngineServiceStub(object):
    """************************************
    Policy Engine Services
    ************************************
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.IsAllowed = channel.unary_unary(
                '/idm.PolicyEngineService/IsAllowed',
                request_serializer=cells__idm__pb2.PolicyEngineRequest.SerializeToString,
                response_deserializer=cells__idm__pb2.PolicyEngineResponse.FromString,
                )
        self.StorePolicyGroup = channel.unary_unary(
                '/idm.PolicyEngineService/StorePolicyGroup',
                request_serializer=cells__idm__pb2.StorePolicyGroupRequest.SerializeToString,
                response_deserializer=cells__idm__pb2.StorePolicyGroupResponse.FromString,
                )
        self.ListPolicyGroups = channel.unary_unary(
                '/idm.PolicyEngineService/ListPolicyGroups',
                request_serializer=cells__idm__pb2.ListPolicyGroupsRequest.SerializeToString,
                response_deserializer=cells__idm__pb2.ListPolicyGroupsResponse.FromString,
                )
        self.DeletePolicyGroup = channel.unary_unary(
                '/idm.PolicyEngineService/DeletePolicyGroup',
                request_serializer=cells__idm__pb2.DeletePolicyGroupRequest.SerializeToString,
                response_deserializer=cells__idm__pb2.DeletePolicyGroupResponse.FromString,
                )


class PolicyEngineServiceServicer(object):
    """************************************
    Policy Engine Services
    ************************************
    """

    def IsAllowed(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StorePolicyGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListPolicyGroups(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeletePolicyGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PolicyEngineServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'IsAllowed': grpc.unary_unary_rpc_method_handler(
                    servicer.IsAllowed,
                    request_deserializer=cells__idm__pb2.PolicyEngineRequest.FromString,
                    response_serializer=cells__idm__pb2.PolicyEngineResponse.SerializeToString,
            ),
            'StorePolicyGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.StorePolicyGroup,
                    request_deserializer=cells__idm__pb2.StorePolicyGroupRequest.FromString,
                    response_serializer=cells__idm__pb2.StorePolicyGroupResponse.SerializeToString,
            ),
            'ListPolicyGroups': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPolicyGroups,
                    request_deserializer=cells__idm__pb2.ListPolicyGroupsRequest.FromString,
                    response_serializer=cells__idm__pb2.ListPolicyGroupsResponse.SerializeToString,
            ),
            'DeletePolicyGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.DeletePolicyGroup,
                    request_deserializer=cells__idm__pb2.DeletePolicyGroupRequest.FromString,
                    response_serializer=cells__idm__pb2.DeletePolicyGroupResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'idm.PolicyEngineService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PolicyEngineService(object):
    """************************************
    Policy Engine Services
    ************************************
    """

    @staticmethod
    def IsAllowed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/idm.PolicyEngineService/IsAllowed',
            cells__idm__pb2.PolicyEngineRequest.SerializeToString,
            cells__idm__pb2.PolicyEngineResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StorePolicyGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/idm.PolicyEngineService/StorePolicyGroup',
            cells__idm__pb2.StorePolicyGroupRequest.SerializeToString,
            cells__idm__pb2.StorePolicyGroupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListPolicyGroups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/idm.PolicyEngineService/ListPolicyGroups',
            cells__idm__pb2.ListPolicyGroupsRequest.SerializeToString,
            cells__idm__pb2.ListPolicyGroupsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeletePolicyGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/idm.PolicyEngineService/DeletePolicyGroup',
            cells__idm__pb2.DeletePolicyGroupRequest.SerializeToString,
            cells__idm__pb2.DeletePolicyGroupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
