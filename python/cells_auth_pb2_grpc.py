# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import cells_auth_pb2 as cells__auth__pb2


class AuthTokenRevokerStub(object):
    """AuthTokenRevoker
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Revoke = channel.unary_unary(
                '/auth.AuthTokenRevoker/Revoke',
                request_serializer=cells__auth__pb2.RevokeTokenRequest.SerializeToString,
                response_deserializer=cells__auth__pb2.RevokeTokenResponse.FromString,
                )


class AuthTokenRevokerServicer(object):
    """AuthTokenRevoker
    """

    def Revoke(self, request, context):
        """Revoker invalidates the current token and specifies if the invalidation is due to a refresh or a revokation
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthTokenRevokerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Revoke': grpc.unary_unary_rpc_method_handler(
                    servicer.Revoke,
                    request_deserializer=cells__auth__pb2.RevokeTokenRequest.FromString,
                    response_serializer=cells__auth__pb2.RevokeTokenResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'auth.AuthTokenRevoker', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AuthTokenRevoker(object):
    """AuthTokenRevoker
    """

    @staticmethod
    def Revoke(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.AuthTokenRevoker/Revoke',
            cells__auth__pb2.RevokeTokenRequest.SerializeToString,
            cells__auth__pb2.RevokeTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AuthTokenPrunerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PruneTokens = channel.unary_unary(
                '/auth.AuthTokenPruner/PruneTokens',
                request_serializer=cells__auth__pb2.PruneTokensRequest.SerializeToString,
                response_deserializer=cells__auth__pb2.PruneTokensResponse.FromString,
                )


class AuthTokenPrunerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def PruneTokens(self, request, context):
        """PruneTokens clear revoked tokens
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthTokenPrunerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PruneTokens': grpc.unary_unary_rpc_method_handler(
                    servicer.PruneTokens,
                    request_deserializer=cells__auth__pb2.PruneTokensRequest.FromString,
                    response_serializer=cells__auth__pb2.PruneTokensResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'auth.AuthTokenPruner', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AuthTokenPruner(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def PruneTokens(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.AuthTokenPruner/PruneTokens',
            cells__auth__pb2.PruneTokensRequest.SerializeToString,
            cells__auth__pb2.PruneTokensResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class LoginProviderStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetLogin = channel.unary_unary(
                '/auth.LoginProvider/GetLogin',
                request_serializer=cells__auth__pb2.GetLoginRequest.SerializeToString,
                response_deserializer=cells__auth__pb2.GetLoginResponse.FromString,
                )
        self.CreateLogin = channel.unary_unary(
                '/auth.LoginProvider/CreateLogin',
                request_serializer=cells__auth__pb2.CreateLoginRequest.SerializeToString,
                response_deserializer=cells__auth__pb2.CreateLoginResponse.FromString,
                )
        self.AcceptLogin = channel.unary_unary(
                '/auth.LoginProvider/AcceptLogin',
                request_serializer=cells__auth__pb2.AcceptLoginRequest.SerializeToString,
                response_deserializer=cells__auth__pb2.AcceptLoginResponse.FromString,
                )


class LoginProviderServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetLogin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateLogin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AcceptLogin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LoginProviderServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetLogin': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLogin,
                    request_deserializer=cells__auth__pb2.GetLoginRequest.FromString,
                    response_serializer=cells__auth__pb2.GetLoginResponse.SerializeToString,
            ),
            'CreateLogin': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateLogin,
                    request_deserializer=cells__auth__pb2.CreateLoginRequest.FromString,
                    response_serializer=cells__auth__pb2.CreateLoginResponse.SerializeToString,
            ),
            'AcceptLogin': grpc.unary_unary_rpc_method_handler(
                    servicer.AcceptLogin,
                    request_deserializer=cells__auth__pb2.AcceptLoginRequest.FromString,
                    response_serializer=cells__auth__pb2.AcceptLoginResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'auth.LoginProvider', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LoginProvider(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetLogin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.LoginProvider/GetLogin',
            cells__auth__pb2.GetLoginRequest.SerializeToString,
            cells__auth__pb2.GetLoginResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateLogin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.LoginProvider/CreateLogin',
            cells__auth__pb2.CreateLoginRequest.SerializeToString,
            cells__auth__pb2.CreateLoginResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AcceptLogin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.LoginProvider/AcceptLogin',
            cells__auth__pb2.AcceptLoginRequest.SerializeToString,
            cells__auth__pb2.AcceptLoginResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ConsentProviderStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetConsent = channel.unary_unary(
                '/auth.ConsentProvider/GetConsent',
                request_serializer=cells__auth__pb2.GetConsentRequest.SerializeToString,
                response_deserializer=cells__auth__pb2.GetConsentResponse.FromString,
                )
        self.CreateConsent = channel.unary_unary(
                '/auth.ConsentProvider/CreateConsent',
                request_serializer=cells__auth__pb2.CreateConsentRequest.SerializeToString,
                response_deserializer=cells__auth__pb2.CreateConsentResponse.FromString,
                )
        self.AcceptConsent = channel.unary_unary(
                '/auth.ConsentProvider/AcceptConsent',
                request_serializer=cells__auth__pb2.AcceptConsentRequest.SerializeToString,
                response_deserializer=cells__auth__pb2.AcceptConsentResponse.FromString,
                )


class ConsentProviderServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetConsent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateConsent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AcceptConsent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ConsentProviderServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetConsent': grpc.unary_unary_rpc_method_handler(
                    servicer.GetConsent,
                    request_deserializer=cells__auth__pb2.GetConsentRequest.FromString,
                    response_serializer=cells__auth__pb2.GetConsentResponse.SerializeToString,
            ),
            'CreateConsent': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateConsent,
                    request_deserializer=cells__auth__pb2.CreateConsentRequest.FromString,
                    response_serializer=cells__auth__pb2.CreateConsentResponse.SerializeToString,
            ),
            'AcceptConsent': grpc.unary_unary_rpc_method_handler(
                    servicer.AcceptConsent,
                    request_deserializer=cells__auth__pb2.AcceptConsentRequest.FromString,
                    response_serializer=cells__auth__pb2.AcceptConsentResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'auth.ConsentProvider', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ConsentProvider(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetConsent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.ConsentProvider/GetConsent',
            cells__auth__pb2.GetConsentRequest.SerializeToString,
            cells__auth__pb2.GetConsentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateConsent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.ConsentProvider/CreateConsent',
            cells__auth__pb2.CreateConsentRequest.SerializeToString,
            cells__auth__pb2.CreateConsentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AcceptConsent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.ConsentProvider/AcceptConsent',
            cells__auth__pb2.AcceptConsentRequest.SerializeToString,
            cells__auth__pb2.AcceptConsentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class LogoutProviderStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateLogout = channel.unary_unary(
                '/auth.LogoutProvider/CreateLogout',
                request_serializer=cells__auth__pb2.CreateLogoutRequest.SerializeToString,
                response_deserializer=cells__auth__pb2.CreateLogoutResponse.FromString,
                )
        self.AcceptLogout = channel.unary_unary(
                '/auth.LogoutProvider/AcceptLogout',
                request_serializer=cells__auth__pb2.AcceptLogoutRequest.SerializeToString,
                response_deserializer=cells__auth__pb2.AcceptLogoutResponse.FromString,
                )


class LogoutProviderServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateLogout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AcceptLogout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LogoutProviderServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateLogout': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateLogout,
                    request_deserializer=cells__auth__pb2.CreateLogoutRequest.FromString,
                    response_serializer=cells__auth__pb2.CreateLogoutResponse.SerializeToString,
            ),
            'AcceptLogout': grpc.unary_unary_rpc_method_handler(
                    servicer.AcceptLogout,
                    request_deserializer=cells__auth__pb2.AcceptLogoutRequest.FromString,
                    response_serializer=cells__auth__pb2.AcceptLogoutResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'auth.LogoutProvider', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LogoutProvider(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateLogout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.LogoutProvider/CreateLogout',
            cells__auth__pb2.CreateLogoutRequest.SerializeToString,
            cells__auth__pb2.CreateLogoutResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AcceptLogout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.LogoutProvider/AcceptLogout',
            cells__auth__pb2.AcceptLogoutRequest.SerializeToString,
            cells__auth__pb2.AcceptLogoutResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AuthCodeProviderStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateAuthCode = channel.unary_unary(
                '/auth.AuthCodeProvider/CreateAuthCode',
                request_serializer=cells__auth__pb2.CreateAuthCodeRequest.SerializeToString,
                response_deserializer=cells__auth__pb2.CreateAuthCodeResponse.FromString,
                )


class AuthCodeProviderServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateAuthCode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthCodeProviderServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateAuthCode': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAuthCode,
                    request_deserializer=cells__auth__pb2.CreateAuthCodeRequest.FromString,
                    response_serializer=cells__auth__pb2.CreateAuthCodeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'auth.AuthCodeProvider', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AuthCodeProvider(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateAuthCode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.AuthCodeProvider/CreateAuthCode',
            cells__auth__pb2.CreateAuthCodeRequest.SerializeToString,
            cells__auth__pb2.CreateAuthCodeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AuthTokenVerifierStub(object):
    """AuthTokenVerifier
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Verify = channel.unary_unary(
                '/auth.AuthTokenVerifier/Verify',
                request_serializer=cells__auth__pb2.VerifyTokenRequest.SerializeToString,
                response_deserializer=cells__auth__pb2.VerifyTokenResponse.FromString,
                )


class AuthTokenVerifierServicer(object):
    """AuthTokenVerifier
    """

    def Verify(self, request, context):
        """Verifies a token and returns claims
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthTokenVerifierServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Verify': grpc.unary_unary_rpc_method_handler(
                    servicer.Verify,
                    request_deserializer=cells__auth__pb2.VerifyTokenRequest.FromString,
                    response_serializer=cells__auth__pb2.VerifyTokenResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'auth.AuthTokenVerifier', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AuthTokenVerifier(object):
    """AuthTokenVerifier
    """

    @staticmethod
    def Verify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.AuthTokenVerifier/Verify',
            cells__auth__pb2.VerifyTokenRequest.SerializeToString,
            cells__auth__pb2.VerifyTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AuthCodeExchangerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Exchange = channel.unary_unary(
                '/auth.AuthCodeExchanger/Exchange',
                request_serializer=cells__auth__pb2.ExchangeRequest.SerializeToString,
                response_deserializer=cells__auth__pb2.ExchangeResponse.FromString,
                )


class AuthCodeExchangerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Exchange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthCodeExchangerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Exchange': grpc.unary_unary_rpc_method_handler(
                    servicer.Exchange,
                    request_deserializer=cells__auth__pb2.ExchangeRequest.FromString,
                    response_serializer=cells__auth__pb2.ExchangeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'auth.AuthCodeExchanger', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AuthCodeExchanger(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Exchange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.AuthCodeExchanger/Exchange',
            cells__auth__pb2.ExchangeRequest.SerializeToString,
            cells__auth__pb2.ExchangeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class PasswordCredentialsCodeStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PasswordCredentialsCode = channel.unary_unary(
                '/auth.PasswordCredentialsCode/PasswordCredentialsCode',
                request_serializer=cells__auth__pb2.PasswordCredentialsCodeRequest.SerializeToString,
                response_deserializer=cells__auth__pb2.PasswordCredentialsCodeResponse.FromString,
                )


class PasswordCredentialsCodeServicer(object):
    """Missing associated documentation comment in .proto file."""

    def PasswordCredentialsCode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PasswordCredentialsCodeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PasswordCredentialsCode': grpc.unary_unary_rpc_method_handler(
                    servicer.PasswordCredentialsCode,
                    request_deserializer=cells__auth__pb2.PasswordCredentialsCodeRequest.FromString,
                    response_serializer=cells__auth__pb2.PasswordCredentialsCodeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'auth.PasswordCredentialsCode', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PasswordCredentialsCode(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def PasswordCredentialsCode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.PasswordCredentialsCode/PasswordCredentialsCode',
            cells__auth__pb2.PasswordCredentialsCodeRequest.SerializeToString,
            cells__auth__pb2.PasswordCredentialsCodeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class PasswordCredentialsTokenStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PasswordCredentialsToken = channel.unary_unary(
                '/auth.PasswordCredentialsToken/PasswordCredentialsToken',
                request_serializer=cells__auth__pb2.PasswordCredentialsTokenRequest.SerializeToString,
                response_deserializer=cells__auth__pb2.PasswordCredentialsTokenResponse.FromString,
                )


class PasswordCredentialsTokenServicer(object):
    """Missing associated documentation comment in .proto file."""

    def PasswordCredentialsToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PasswordCredentialsTokenServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PasswordCredentialsToken': grpc.unary_unary_rpc_method_handler(
                    servicer.PasswordCredentialsToken,
                    request_deserializer=cells__auth__pb2.PasswordCredentialsTokenRequest.FromString,
                    response_serializer=cells__auth__pb2.PasswordCredentialsTokenResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'auth.PasswordCredentialsToken', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PasswordCredentialsToken(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def PasswordCredentialsToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.PasswordCredentialsToken/PasswordCredentialsToken',
            cells__auth__pb2.PasswordCredentialsTokenRequest.SerializeToString,
            cells__auth__pb2.PasswordCredentialsTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AuthTokenRefresherStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Refresh = channel.unary_unary(
                '/auth.AuthTokenRefresher/Refresh',
                request_serializer=cells__auth__pb2.RefreshTokenRequest.SerializeToString,
                response_deserializer=cells__auth__pb2.RefreshTokenResponse.FromString,
                )


class AuthTokenRefresherServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Refresh(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthTokenRefresherServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Refresh': grpc.unary_unary_rpc_method_handler(
                    servicer.Refresh,
                    request_deserializer=cells__auth__pb2.RefreshTokenRequest.FromString,
                    response_serializer=cells__auth__pb2.RefreshTokenResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'auth.AuthTokenRefresher', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AuthTokenRefresher(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Refresh(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.AuthTokenRefresher/Refresh',
            cells__auth__pb2.RefreshTokenRequest.SerializeToString,
            cells__auth__pb2.RefreshTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class PersonalAccessTokenServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Generate = channel.unary_unary(
                '/auth.PersonalAccessTokenService/Generate',
                request_serializer=cells__auth__pb2.PatGenerateRequest.SerializeToString,
                response_deserializer=cells__auth__pb2.PatGenerateResponse.FromString,
                )
        self.Revoke = channel.unary_unary(
                '/auth.PersonalAccessTokenService/Revoke',
                request_serializer=cells__auth__pb2.PatRevokeRequest.SerializeToString,
                response_deserializer=cells__auth__pb2.PatRevokeResponse.FromString,
                )
        self.List = channel.unary_unary(
                '/auth.PersonalAccessTokenService/List',
                request_serializer=cells__auth__pb2.PatListRequest.SerializeToString,
                response_deserializer=cells__auth__pb2.PatListResponse.FromString,
                )


class PersonalAccessTokenServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Generate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Revoke(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def List(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PersonalAccessTokenServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Generate': grpc.unary_unary_rpc_method_handler(
                    servicer.Generate,
                    request_deserializer=cells__auth__pb2.PatGenerateRequest.FromString,
                    response_serializer=cells__auth__pb2.PatGenerateResponse.SerializeToString,
            ),
            'Revoke': grpc.unary_unary_rpc_method_handler(
                    servicer.Revoke,
                    request_deserializer=cells__auth__pb2.PatRevokeRequest.FromString,
                    response_serializer=cells__auth__pb2.PatRevokeResponse.SerializeToString,
            ),
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=cells__auth__pb2.PatListRequest.FromString,
                    response_serializer=cells__auth__pb2.PatListResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'auth.PersonalAccessTokenService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PersonalAccessTokenService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Generate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.PersonalAccessTokenService/Generate',
            cells__auth__pb2.PatGenerateRequest.SerializeToString,
            cells__auth__pb2.PatGenerateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Revoke(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.PersonalAccessTokenService/Revoke',
            cells__auth__pb2.PatRevokeRequest.SerializeToString,
            cells__auth__pb2.PatRevokeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.PersonalAccessTokenService/List',
            cells__auth__pb2.PatListRequest.SerializeToString,
            cells__auth__pb2.PatListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
