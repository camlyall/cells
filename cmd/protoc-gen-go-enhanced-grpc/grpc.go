package main

import (
	"fmt"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
)

const (
	fmtPackage             = protogen.GoImportPath("fmt")
	contextPackage         = protogen.GoImportPath("context")
	syncPackage            = protogen.GoImportPath("sync")
	grpcPackage            = protogen.GoImportPath("google.golang.org/grpc")
	statusPackage          = protogen.GoImportPath("google.golang.org/grpc/status")
	codesPackage           = protogen.GoImportPath("google.golang.org/grpc/codes")
	metadataContextPackage = protogen.GoImportPath("google.golang.org/grpc/metadata")
)

// generateFile generates a _grpc.pb.go file containing gRPC service definitions.
func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_grpc.enhanced.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-grpc. DO NOT EDIT.")
	g.P("// versions:")
	g.P("// - protoc-gen-go-grpc v", version)
	g.P("// - protoc             ", protocVersion(gen))
	if file.Proto.GetOptions().GetDeprecated() {
		g.P("// ", file.Desc.Path(), " is a deprecated file.")
	} else {
		g.P("// source: ", file.Desc.Path())
	}
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	generateFileContent(gen, file, g)
	return g
}

func protocVersion(gen *protogen.Plugin) string {
	v := gen.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}
	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}
	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}

// generateFileContent generates the gRPC service definitions, excluding the package statement.
func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile) {
	if len(file.Services) == 0 {
		return
	}

	g.P("// This is a compile-time assertion to ensure that this generated file")
	g.P("// is compatible with the grpc package it is being compiled against.")
	g.P("// Requires gRPC-Go v1.32.0 or later.")
	g.P("const _ = ", grpcPackage.Ident("SupportPackageIsVersion7")) // When changing, update version number above.
	g.P()
	for _, service := range file.Services {
		genService(gen, file, g, service)
	}
}

func genService(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service) {
	server := service.GoName + "Server"
	idServer := "id" + server
	//namedServer := "Named" + server
	//wrappedNameServer := "Wrapped" + namedServer
	multiServer := service.GoName + "EnhancedServer"
	multiServerImpl := multiServer + "Impl"
	enhancedInstance := "enhanced" + server + "s"
	enhancedLocker := "enhanced" + server + "sLock"

	g.P("var (")
	g.P(enhancedInstance, " = make(map[string]", multiServer, ")")
	g.P(enhancedLocker, " = ", syncPackage.Ident("RWMutex"), "{}")
	g.P(")")

	g.Annotate(idServer, service.Location)
	g.P("type " + idServer + " interface {")
	g.P("ID() string")
	g.P("}")

	//g.Annotate(namedServer, service.Location)
	//g.P("type " + namedServer + " interface {")
	//g.P(server)
	//g.P("Name() string")
	//g.P("}")
	//
	//g.Annotate(wrappedNameServer, service.Location)
	//g.P("type " + wrappedNameServer + " struct {")
	//g.P(namedServer)
	//g.P("wrap []func(", contextPackage.Ident("Context"), ") (", contextPackage.Ident("Context"), ", bool)")
	//g.P("}")

	g.Annotate(multiServer, service.Location)
	g.P("type " + multiServer + " interface {")
	g.P(server)
	g.P("AddFilter(func(", contextPackage.Ident("Context"), ", interface{}) bool)")
	g.P("addHandler(", server, ")")
	g.P("filter(", contextPackage.Ident("Context"), ") []", server)
	g.P("}")

	g.Annotate(multiServerImpl, service.Location)
	g.P("type " + multiServerImpl + " struct {")
	g.P("filters []func(", contextPackage.Ident("Context"), ", interface{}) bool")
	g.P("handlers []", server)
	g.P("}")

	g.P("func (m *", multiServerImpl, ") AddFilter(f func(", contextPackage.Ident("Context"), ", interface{}) bool) {")
	g.P("m.filters = append(m.filters, f)")
	g.P("}")

	g.P("func (m *", multiServerImpl, ") addHandler(srv ", server, ") {")
	g.P("m.handlers = append(m.handlers, srv)")
	g.P("}")

	g.P("func (m *", multiServerImpl, ") filter(ctx ", contextPackage.Ident("Context"), ") []", server, "{")
	g.P("var ret []", server)
	g.P("for _, i := range m.handlers {")
	g.P("valid := true")
	g.P("for _, filter := range m.filters {")
	g.P("if !filter(ctx, i) {")
	g.P("valid = false")
	g.P("break")
	g.P("}")
	g.P("if valid {")
	g.P("ret = append(ret, i)")
	g.P("}")
	g.P("}")
	g.P("}")
	g.P("return ret")
	g.P("}")

	for _, method := range service.Methods {
		g.Annotate(multiServer+"."+method.GoName, method.Location)

		g.P(method.Comments.Leading)
		g.P("func (m *", multiServerImpl, ") ", serverSignature(g, method), " {")
		if !method.Desc.IsStreamingClient() && !method.Desc.IsStreamingServer() {
			g.P("for _, handler := range m.filter(ctx) {")
			g.P("return handler.", method.GoName, "(ctx, r)")
			g.P("}")
			g.P("return nil, ", statusPackage.Ident("Errorf"), "(", codesPackage.Ident("Unimplemented"), ", \"method ", method.GoName, " not implemented\")")

		} else if !method.Desc.IsStreamingClient() {
			g.P("for _, handler := range m.filter(s.Context()) {")
			g.P("return handler.", method.GoName, "(r, s)")
			g.P("}")
			g.P("return ", statusPackage.Ident("Errorf"), "(", codesPackage.Ident("Unimplemented"), ", \"method ", method.GoName, " not implemented\")")
		} else {
			g.P("for _, handler := range m.filter(s.Context()) {")
			g.P("return handler.", method.GoName, "(s)")
			g.P("}")
			g.P("return ", statusPackage.Ident("Errorf"), "(", codesPackage.Ident("Unimplemented"), ", \"method ", method.GoName, " not implemented\")")
		}
		g.P("}")
	}

	g.P("func (m *", multiServerImpl, ") mustEmbedUnimplemented", server, "() {}")

	g.P("func Register", multiServer, "(s grpc.ServiceRegistrar, srv ", server, ") {")
	g.P("idServer, ok := s.(" + idServer + ")")
	g.P("if ok {")
	g.P(enhancedLocker, ".Lock()")
	g.P("defer ", enhancedLocker, ".Unlock()")
	g.P("instance, ok := ", enhancedInstance, "[idServer.ID()]")
	g.P("if !ok {")
	g.P("instance = &", multiServerImpl, "{}")
	g.P(enhancedInstance, "[idServer.ID()] = instance")
	g.P("}")
	g.P("instance.addHandler(srv)")
	g.P("Register", server, "(s, instance)")
	g.P("} else {")
	g.P("Register", server, "(s, srv)")
	g.P("}")
	g.P("}")

	//g.P("func Deregister", multiServer, "(s grpc.ServiceRegistrar, name string) {")
	//g.P(enhancedLocker, ".Lock()")
	//g.P("defer ", enhancedLocker, ".Unlock()")
	//g.P("idServer, ok := s.(" + idServer + ")")
	//g.P("if !ok {")
	//g.P(fmtPackage.Ident("Errorf"), "(\"could not deregister service\")")
	//g.P("return")
	//g.P("}")
	//g.P("id := idServer.ID()")
	//g.P("m, ok := ", enhancedInstance, "[id]")
	//g.P("if !ok || true {")
	//g.P("return")
	//g.P("}")
	//g.P("delete(m, name)")
	//g.P("}")
}

func serverSignature(g *protogen.GeneratedFile, method *protogen.Method) string {
	var reqArgs []string
	ret := "error"
	if !method.Desc.IsStreamingClient() && !method.Desc.IsStreamingServer() {
		reqArgs = append(reqArgs, "ctx "+g.QualifiedGoIdent(contextPackage.Ident("Context")))
		ret = "(*" + g.QualifiedGoIdent(method.Output.GoIdent) + ", error)"
	}
	if !method.Desc.IsStreamingClient() {
		reqArgs = append(reqArgs, "r *"+g.QualifiedGoIdent(method.Input.GoIdent))
	}
	if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
		reqArgs = append(reqArgs, "s "+method.Parent.GoName+"_"+method.GoName+"Server")
	}
	return method.GoName + "(" + strings.Join(reqArgs, ", ") + ") " + ret
}
